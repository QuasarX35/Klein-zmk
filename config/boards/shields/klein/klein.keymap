/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

// Default config at: https://github.com/snsten/Klein-zmk/blob/main/config/boards/shields/klein/klein.keymap

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
// #include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>

//* ------------------------ Default Layer Definitions ----------------------- *//
#define DEFAULT 0
#define NAV     1
#define MOUSE   2
#define BUTTON  3
#define MEDIA   4
#define NUM     5
#define SYM     6
#define FUN     7

//* ------------------------- Extra Layer Definitions ------------------------ *//
#define EXTRA           8
#define TAP             9
#define GENSHIN         10
#define GENSHIN_EXTRA   11
// #define MAKS 12

&out {
    OUT_BLE;
};

&mt {
    // quick-tap-ms: If you press a tapped hold-tap again within quick-tap-ms milliseconds, it will always trigger the tap behavior. This is useful for things like a backspace, where a quick tap+hold holds backspace pressed. Set this to a negative value to disable. The default is -1 (disabled).
    // tapping-term-ms: Defines how long a key must be pressed to trigger Hold behavior.
    quick-tap-ms = <125>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <300>;
};

&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            global-quick-tap;
            bindings =
                <&kp>,
                <&kp>;
        };

        rot_tog: behavior_sensor_rotate_kp {
            compatible = "zmk,behavior-sensor-rotate-var";
            label = "ENC_TOG";
            #sensor-binding-cells = <2>;
            bindings = <&tog>, <&tog>;
        };

        u_bt_sel_0: bluetooth_select_0 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 0>, <&bt BT_CLR>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        u_bt_sel_1: bluetooth_select_1 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 1>, <&bt BT_CLR>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        u_bt_sel_2: bluetooth_select_2 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 2>, <&bt BT_CLR>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        u_bt_sel_3: bluetooth_select_3 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 3>, <&bt BT_CLR>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // double tap to activate layers
        u_to_U_DEFAULT: default_layer {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&none>, <&tog DEFAULT>;
        };

        u_to_U_NAV: nav_layer {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&none>, <&tog NAV>;
        };

        u_to_U_MOUSE: mouse_layer {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&none>, <&tog MOUSE>;
        };

        u_to_U_BUTTON: button_layer {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&none>, <&tog BUTTON>;
        };

        u_to_U_MEDIA: media_layer {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&none>, <&tog MEDIA>;
        };

        u_to_U_NUM: num_layer {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&none>, <&tog NUM>;
        };

        u_to_U_SYM: sym_layer {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&none>, <&tog SYM>;
        };

        u_to_U_FUN: fun_layer {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&none>, <&tog FUN>;
        };

        U_BOOT: bootloader {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&none>, <&bootloader>;
        };

        u_to_U_TAP: tap_layer {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&none>, <&tog TAP>;
        };

        u_to_U_EXTRA: extra_layer {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&none>, <&tog EXTRA>;
        };

        u_to_U_GENSHIN: genshin_layer {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&none>, <&tog GENSHIN>;
        };
    };

    combos {
        compatible = "zmk,combos";
    };
    
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
            &kp Q           &kp W           &kp E           &kp R       &kp T  /**/  &kp Y  &kp U         &kp I           &kp O                 &kp P
            &mt LGUI A      &mt LALT S      &mt LCTRL D     &mt LSHFT F &kp G  /**/  &kp H  &mt RSHFT J   &mt RCTRL K     &mt RALT L            &mt RGUI SQT
            &lt BUTTON Z    &kp X           &kp C           &kp V       &kp B  /**/  &kp N  &kp M         &kp COMMA       &kp DOT               &lt BUTTON FSLH
            &lt MEDIA ESC   &lt NAV SPACE   &lt MOUSE TAB   &none              /**/         &none         &lt SYM RETURN  &lt NUM BACKSPACE     &lt FUN DEL
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP &inc_dec_kp DOWN_ARROW UP_ARROW>;
        };

        nav_layer {
            bindings = <
            &U_BOOT         &u_to_U_TAP &u_to_U_EXTRA   &u_to_U_DEFAULT     &trans  /**/  &kp LC(Y) &kp LC(P)   &kp LC(C)   &kp LC(X)       &kp LC(Z)
            &kp LGUI        &kp LALT    &kp LCTRL       &kp LSHFT           &trans  /**/  &kp LEFT  &kp DOWN    &kp UP      &kp RIGHT       &caps_word
            &trans          &kp RALT    &u_to_U_NUM     &u_to_U_NAV         &trans  /**/  &kp HOME  &kp PG_UP   &kp PG_DN   &kp END         &kp INSERT
            &trans          &none       &trans          &none                       /**/            &none       &kp RET     &kp BACKSPACE   &kp DEL
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP>;
        };

        mouse_layer {
            bindings = <
            &U_BOOT         &u_to_U_TAP &u_to_U_EXTRA   &u_to_U_DEFAULT     &trans  /**/  &kp LC(Y) &kp LC(P)   &kp LC(C)   &kp LC(X)   &kp LC(Z)
            &kp LGUI        &kp LALT    &kp LCTRL       &kp LSHFT           &trans  /**/  &kp LEFT  &kp DOWN    &kp UP      &kp RIGHT   &caps_word
            &trans          &kp RALT    &u_to_U_SYM     &u_to_U_MOUSE       &trans  /**/  &kp HOME  &kp PG_UP   &kp PG_DN   &kp END     &kp INSERT
            &trans          &trans      &trans          &none                       /**/            &none       &trans      &trans      &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP>;
        };

        button_layer {
            bindings = <
            &kp LC(Z)   &kp LC(X)   &kp LC(C)   &kp LC(P)   &kp LC(Y)   /**/   &kp LC(Y)    &kp LC(P)   &kp LC(C)   &kp LC(X)   &kp LC(Z)
            &kp LGUI    &kp LALT    &kp LCTRL   &kp LSHFT   &trans      /**/   &trans       &kp RSHFT   &kp RCTRL   &kp RALT    &kp RGUI
            &kp LC(Z)   &kp LC(X)   &kp LC(C)   &kp LC(P)   &kp LC(Y)   /**/   &kp LC(Y)    &kp LC(P)   &kp LC(C)   &kp LC(X)   &kp LC(Z)
            &trans      &trans      &trans      &none                   /**/                &none       &trans      &trans      &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP>;
        };

        media_layer {
            bindings = <
            &U_BOOT         &u_to_U_TAP &u_to_U_EXTRA   &u_to_U_DEFAULT &trans  /**/  &rgb_ug RGB_EFF   &rgb_ug RGB_HUI &rgb_ug RGB_SAI &rgb_ug RGB_BRI &rgb_ug RGB_TOG
            &kp LGUI        &kp LALT    &kp LCTRL       &kp LSHFT       &trans  /**/  &kp C_PREV        &kp C_VOL_DN    &kp C_VOL_UP    &kp C_NEXT      &ext_power EP_TOG
            &trans          &kp RALT    &u_to_U_FUN     &u_to_U_MEDIA   &trans  /**/  &u_bt_sel_0       &u_bt_sel_1     &u_bt_sel_2     &u_bt_sel_3     &bt BT_CLR_ALL
            &trans          &trans      &trans          &none                   /**/                    &none           &kp C_PAUSE     &kp C_PP        &kp C_MUTE
            >;

            sensor-bindings = <&inc_dec_kp C_BRI_DN C_BRI_UP>;
        };

        num_layer {
            bindings = <
            &kp LBKT    &kp N7  &kp N8      &kp N9  &kp RBKT   /**/  &trans &u_to_U_DEFAULT &u_to_U_EXTRA   &u_to_U_TAP &U_BOOT
            &kp SEMI    &kp N4  &kp N5      &kp N6  &kp EQUAL  /**/  &trans &kp RSHFT       &kp RCTRL       &kp RALT    &kp RGUI
            &kp GRAVE   &kp N1  &kp N2      &kp N3  &kp BSLH   /**/  &trans &u_to_U_NUM     &u_to_U_NAV     &kp LALT    &trans
            &kp PERIOD  &kp N0  &kp MINUS   &none              /**/         &none           &trans          &trans      &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP>;
        };

        sym_layer {
            bindings = <
            &kp LBRC    &kp AMPS    &kp ASTRK   &kp LPAR    &kp RBRC   /**/  &trans &u_to_U_DEFAULT &u_to_U_EXTRA   &u_to_U_TAP &U_BOOT
            &kp COLON   &kp DOLLAR  &kp PERCENT &kp CARET   &kp PLUS   /**/  &trans &kp RSHFT       &kp RCTRL       &kp RALT    &kp RGUI
            &kp TILDE   &kp EXCL    &kp AT      &kp HASH    &kp PIPE   /**/  &trans &u_to_U_SYM     &u_to_U_MOUSE   &kp LALT    &trans
            &kp PERIOD  &kp N0      &kp MINUS   &none                  /**/         &none           &trans          &trans      &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP>;
        };

        fun_layer {
            bindings = <
            &kp F12     &kp F7      &kp F8  &kp F9  &kp PSCRN        /**/  &trans &u_to_U_DEFAULT &u_to_U_EXTRA   &u_to_U_TAP &U_BOOT
            &kp F11     &kp F4      &kp F5  &kp F6  &kp SLCK         /**/  &trans &kp RSHFT       &kp RCTRL       &kp RALT    &kp RGUI
            &kp F10     &kp F1      &kp F2  &kp F3  &kp PAUSE_BREAK  /**/  &trans &u_to_U_FUN     &u_to_U_MEDIA   &kp LALT    &trans
            &kp ESC     &kp SPACE   &kp TAB &none                                 &none           &trans          &trans      &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP>;
        };

        extra_layer {
            bindings = <
            &trans          &trans      &trans  &trans  &trans  /**/  &trans    &trans  &trans  &trans          &trans
            &tog GENSHIN    &trans      &trans  &trans  &trans  /**/  &trans    &trans  &trans  &trans          &trans
            &trans          &trans      &trans  &trans  &trans  /**/  &trans    &trans  &trans  &trans          &trans
            &trans          &trans      &trans  &none           /**/            &none   &trans  &tog DEFAULT    &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP>;
        };

        tap_layer {
            bindings = <
            &kp Q           &kp W       &kp E   &kp R   &kp T  /**/  &kp Y    &kp U      &kp I      &kp O       &kp P
            &kp A           &kp S       &kp D   &kp F   &kp G  /**/  &kp H    &kp J      &kp K      &kp L       &kp SQT
            &kp Z           &kp X       &kp C   &kp V   &kp B  /**/  &kp N    &kp M      &kp COMMA  &kp PERIOD  &kp FSLH
            &lt MEDIA ESC   &kp SPACE   &kp TAB &none          /**/           &none      &kp RET    &kp BSPC    &kp DEL
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP>;
        }

        genshin_layer {
            bindings = <
            &kp N1                  &kp N2      &kp N3      &kp N4  &kp N5     /**/  &trans    &trans   &trans  &trans          &trans
            &mt V Z                 &kp Q       &kp W       &kp E   &kp R      /**/  &trans    &trans   &trans  &trans          &trans
            &kp X T                 &kp A       &kp S       &kp D   &kp F      /**/  &trans    &trans   &trans  &trans          &trans
            &lt GENSHIN_EXTRA ESC   &kp SPACE   &kp LALT    &none              /**/            &none    &kp RET &tog DEFAULT    &trans
            >;

            sensor-bindings = <&inc_dec_kp LEFT RIGHT &inc_dec_kp C_VOL_DN C_VOL_UP>;
        };

        genshin_extra_layer {
            bindings = <
            &kp F1  &kp F2  &kp F3  &kp F4  &kp F5     /**/  &trans    &trans   &trans  &trans  &trans
            &kp F6  &kp O   &kp J   &kp P   &kp Y      /**/  &trans    &trans   &trans  &trans  &trans
            &kp L   &kp B   &kp M   &kp C   &kp G      /**/  &trans    &trans   &trans  &trans  &trans
            &trans  &trans  &trans  &none              /**/            &none    &trans  &trans  &trans
            >;

            sensor-bindings = <&inc_dec_kp LEFT RIGHT &inc_dec_kp C_VOL_DN C_VOL_UP>;
        };

        // maks_en_layer {
        //     bindings = <
        //     &kp SEMI    &kp COMMA   &kp U   &kp D   &kp BACKSPACE  /**/  &kp B  &kp F   &kp L       &kp J       &tog MAKS
        //     &kp A       &kp O       &kp I   &kp T   &kp G          /**/  &kp W  &kp S   &kp N       &kp R       &kp H
        //     &kp QMARK   &kp DQT     &kp Y   &kp P   &kp K          /**/  &kp V  &kp C   &kp M       &kp X       &kp Q
        //     &kp LSHFT   &kp E       &kp DOT &none                               &none   &kp MINUS   &kp SPACE   &kp BACKSPACE
        //     >;

        //     sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP>;
        // };
    };
};
